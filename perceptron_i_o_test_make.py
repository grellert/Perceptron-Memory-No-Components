# -*- coding: utf-8 -*-
"""Perceptron I/O test make.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mTaoN9KnoUmkncQSjoi04iJpTk-_m8MO
"""

import pandas as pd
import numpy as np

import math
exp = math.exp

exp(2)

#defining bias and input values
n_bits = 8
bias = 0
x1= 1
x2= 2
x3= 3
w1= 4
w2= 5
w3= -6

sum = (x1*w1) + (x2*w2) + (x3*w3) + bias
sum

# sum= -12

# tanh = 1-(exp(-2*sum))/(1+(exp(-2*sum)))
# tanh

sigmoid = 1/(1+(exp(-1*sum)))
sigmoid

def sigmoid (x):
  return (1/(1+(exp(-1*x))))

sigmoid(2)

function = sigmoid

# !pip install bistring
# # import bitstring

# from bitstring import BitArray

# # !pip install itertools
# import itertools

testes_x1 = list(range(-128,128,1)) #start, end, step
testes_x2 = range(-128,128,1) #start, end, step
testes_x3 = range(-128,128,1) #start, end, step
# testes_x1

df_inputs = pd.DataFrame()
df_inputs['testes_x1'] = testes_x1
df_inputs['testes_x2'] = testes_x2
df_inputs['testes_x3'] = testes_x3
# df_inputs

# sigmoid_dx_list = np.linspace(-7,7,256) #vai de -7 a 7, dividido em 256 pontos (8 bits)
sigmoid_dx_list = np.linspace(-128,127,256) #vai de -128 a 127, dividido em 256 pontos (8 bits)

# sigmoid_dx_list

df_sigmoid = pd.DataFrame(testes_x1)
df_sigmoid.columns = ['n'] # INPUTS_df
df_sigmoid['dx'] = sigmoid_dx_list
# df_sigmoid

# ((1/(1+(exp(-1*(testes_x1))))).astype(float)).tolist()
# df[0].apply(lambda x: float(x))
multiplied_list = [(1/(1+(exp(-1*(element))))) for element in sigmoid_dx_list]
# multiplied_list
df_sigmoid['sigmoid']= multiplied_list
df_sigmoid

# df_sigmoid[121:136]

import matplotlib.pyplot as plt
plt.close("all")

# (pd.Series(sigmoid_dx)).plot()
(pd.Series(multiplied_list)).plot()

(pd.Series(multiplied_list[121:136])).plot()

#CONTAS Y(SAÍDA)
# df_sigmoid['sigmoid_dx']*df_sigmoid['n']

df_sigmoid['y']= (df_sigmoid['sigmoid']*df_sigmoid['n']) # y = sigmoid_dx * n

df_sigmoid['sig_int'] = df_sigmoid['sigmoid'].astype(int)
df_sigmoid['sig_norm']= df_sigmoid['sigmoid']*256
df_sigmoid['sig_norm_int'] = df_sigmoid['sig_norm'].astype(int)#8b ->MEMORY

df_sigmoid['y_norm_int']= (df_sigmoid['sig_norm_int']*df_sigmoid['n'])#16b
df_sigmoid['y_div']= (df_sigmoid['y_norm_int']/256)
df_sigmoid['y_int'] = df_sigmoid['y_div'].astype(int)
df_sigmoid[121:136]

plt.plot( 'n', 'sig_int', data=df_sigmoid)

!pip install bitstring
from bitstring import BitArray
import itertools

def int2bin(a,lenght):
  b= BitArray(int=a, lenght= lenght)
  return b.bin

# a= int2bin(df_sigmoid['n'],8)

#SIGMOID MEMORY
df_sigmoid_bin = pd.DataFrame()

# #verification
# df_sigmoid_bin['sum_value'] = (df_sigmoid['n'][121:136])
# df_sigmoid_bin['sig_norm_int_ver'] = (df_sigmoid['sig_norm_int'][121:136])

df_sigmoid_bin['sig_norm_int'] = (df_sigmoid['sig_norm_int'][121:136].apply(lambda x: format(int(x), '0{}b'.format(n_bits))))
df_sigmoid_bin

#INPUT REFERENCE
df_input = pd.DataFrame()
df_input['n'] = (df_sigmoid['n'].apply(lambda x: format(int(x), '0{}b'.format(n_bits))))
df_input

# OUTPUT REFERENCE
df_y_int_bin = pd.DataFrame()

## verification
# df_y_int_bin['sum_value'] = (df_sigmoid['n'])

df_y_int_bin['y_int'] = (df_sigmoid['y_int'].apply(lambda x: format(int(x), '0{}b'.format(n_bits))))
df_y_int_bin

# plt.plot( 'n', 'sig_int', data=df_sigmoid[121:150])
# plt.plot( 'n', 'sigmoid', data=df_sigmoid[121:150])
# plt.plot( 'n', 'sig_int', data=df_sigmoid) #como será com 8 bits truncando
# plt.plot( 'n', 'sig_norm_int', data=df_sigmoid) #8 bits * 256
# plt.plot( 'n', 'sig_norm_int', data=df_sigmoid[121:136])
# plt.plot( 'n', 'sig_norm_int', data=df_sigmoid)

plt.plot( 'n', 'y', data=df_sigmoid)
plt.plot( 'n', 'y_int', data=df_sigmoid)

# y_list = [(1/(1+(exp(-1*(element))))) for element in sigmoid_dx]

# if ((element in testes_x1 >= -6) or (element in testes_x1 <= 6))
#   y_list = []

# pd.DataFrame(np.linspace(-12,12,256))

"""# Gravando na Memória"""

